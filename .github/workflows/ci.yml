name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Linting y Formateo
  lint:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint:check

      - name: 💅 Check code formatting
        run: npm run format:check

  # Job 2: Tests
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test

      - name: 📊 Generate coverage report
        run: npm run test:cov
        if: matrix.node-version == 20

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == 20
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Job 3: Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔨 Build project
        run: npm run build

      - name: ✅ Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build failed - dist directory not found"
            exit 1
          fi
          echo "✅ Build successful - dist directory created"

  # Job 4: Prisma Validation
  prisma:
    name: 🗄️ Prisma Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Validate Prisma schema
        run: npx prisma validate
        env:
          DATABASE_URL: "mysql://user:password@localhost:3306/testdb"

      - name: 🔄 Generate Prisma Client
        run: npx prisma generate

  # Job 5: Security Check
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔒 Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # Job 6: Summary
  summary:
    name: ✅ Pipeline Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, prisma, security]
    if: always()
    
    steps:
      - name: 📊 Check overall status
        run: |
          echo "🎉 CI Pipeline completed!"
          echo "✅ Linting: ${{ needs.lint.result }}"
          echo "✅ Tests: ${{ needs.test.result }}"
          echo "✅ Build: ${{ needs.build.result }}"
          echo "✅ Prisma: ${{ needs.prisma.result }}"
          echo "✅ Security: ${{ needs.security.result }}"
