import { NestFactory } from '@nestjs/core';
import { NestExpressApplication } from '@nestjs/platform-express';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { AppModule } from './app.module';
import { join } from 'path';
const chalk = require('chalk');

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);

  // Servir archivos est√°ticos de /uploads
  app.useStaticAssets(join(__dirname, '..', 'uploads'), {
    prefix: '/uploads/',
  });

  // Habilitar CORS para todas las conexiones (desarrollo)
  app.enableCors({
    origin: true, // Permitir todos los or√≠genes durante desarrollo
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'Accept'],
    credentials: true,
  });

  // Prefijo global para todas las rutas de la API
  app.setGlobalPrefix('api');

  // Habilitar validaci√≥n global con class-validator
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true, // Remueve propiedades que no est√°n en el DTO
      forbidNonWhitelisted: true, // Lanza error si hay propiedades extra
      transform: true, // Transforma autom√°ticamente los tipos
      disableErrorMessages: false, // Mostrar mensajes de error detallados
    }),
  );

  // Configuraci√≥n de Swagger/OpenAPI
  const config = new DocumentBuilder()
    .setTitle('EnrutApp API')
    .setDescription(
      'API REST para el sistema de gesti√≥n de transporte EnrutApp. Incluye autenticaci√≥n JWT, gesti√≥n de usuarios, roles, rutas, veh√≠culos, conductores, reservas y m√°s.',
    )
    .setVersion('1.0')
    .addTag('Auth', 'Endpoints de autenticaci√≥n y autorizaci√≥n')
    .addTag('Usuarios', 'Gesti√≥n de usuarios del sistema')
    .addTag('Roles', 'Gesti√≥n de roles y permisos')
    .addTag('Tipos de Documento', 'Cat√°logo de tipos de documento de identidad')
    .addTag('Ciudades', 'Cat√°logo de ciudades')
    .addTag('Rutas', 'Gesti√≥n de rutas de transporte')
    .addTag('Veh√≠culos', 'Gesti√≥n de veh√≠culos')
    .addTag('Conductores', 'Gesti√≥n de conductores')
    .addTag('Reservas', 'Gesti√≥n de reservas de pasajeros')
    .addTag('Encomiendas', 'Gesti√≥n de encomiendas')
    .addTag('Turnos', 'Gesti√≥n de turnos de trabajo')
    .addTag('Finanzas', 'M√≥dulo de finanzas y reportes')
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        name: 'JWT',
        description:
          'Ingrese el token JWT obtenido del endpoint /api/auth/login',
        in: 'header',
      },
      'JWT-auth',
    )
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document, {
    customSiteTitle: 'EnrutApp API - Documentaci√≥n',
    customfavIcon: 'https://nestjs.com/img/logo-small.svg',
    customCss: '.swagger-ui .topbar { display: none }',
  });

  const port = process.env.PORT ?? 3000;
  await app.listen(port);

  // Mensajes informativos en consola con colores
  const serverUrl = `http://localhost:${port}`;
  const apiUrl = `${serverUrl}/api`;
  const docsUrl = `${serverUrl}/api/docs`;
  const uploadsUrl = `${serverUrl}/uploads`;

  console.log('\n');
  console.log(chalk.bold.cyan('=========================================='));
  console.log(chalk.bold.cyan('üöÄ EnrutApp Backend - Servidor Iniciado üöÄ'));
  console.log(chalk.bold.cyan('=========================================='));
  console.log('\n');

  console.log(chalk.bold('üìç URLs del Servidor:'));
  console.log(chalk.green(`   ‚ûú Local:           ${chalk.bold(serverUrl)}`));
  console.log(chalk.green(`   ‚ûú API Base:        ${chalk.bold(apiUrl)}`));
  console.log(
    chalk.yellow(`   ‚ûú Swagger Docs:    ${chalk.bold.underline(docsUrl)}`),
  );
  console.log(chalk.blue(`   ‚ûú Archivos:        ${chalk.bold(uploadsUrl)}`));

  console.log('\n');
  console.log(chalk.bold('‚öôÔ∏è Configuraci√≥n:'));
  console.log(chalk.green('   ‚úì Autenticaci√≥n:   JWT Bearer Token'));
  console.log(chalk.green('   ‚úì Validaci√≥n:      class-validator (Global)'));
  console.log(
    chalk.green('   ‚úì CORS:            Habilitado (todos los or√≠genes)'),
  );
  console.log(chalk.green('   ‚úì Prefijo API:     /api'));

  console.log('\n');
  console.log(chalk.bold('üìã Endpoints Principales:'));
  console.log(chalk.gray('   Auth:'));
  console.log(
    chalk.white('   ‚Ä¢ POST   /api/auth/login           - Iniciar sesi√≥n'),
  );
  console.log(
    chalk.white('   ‚Ä¢ POST   /api/auth/register        - Registrar usuario'),
  );
  console.log(
    chalk.white('   ‚Ä¢ GET    /api/auth/profile         - Perfil (üîí JWT)'),
  );
  console.log(chalk.gray('\n   Recursos:'));
  console.log(
    chalk.white(
      '   ‚Ä¢ GET    /api/usuarios             - Listar usuarios (üîí JWT)',
    ),
  );
  console.log(
    chalk.white('   ‚Ä¢ GET    /api/roles                - Listar roles'),
  );
  console.log(
    chalk.white('   ‚Ä¢ GET    /api/ciudades             - Cat√°logo de ciudades'),
  );
  console.log(
    chalk.white('   ‚Ä¢ GET    /api/tipos-documento      - Tipos de documento'),
  );

  console.log('\n');
  console.log(
    chalk.bold.yellow('üí° Tip: ') +
      chalk.white(
        `Abre ${chalk.bold.underline(docsUrl)} para ver la documentaci√≥n de swagger completa`,
      ),
  );
  console.log(
    chalk.bold.yellow('üîë Nota: ') +
      chalk.white(
        'Usa el bot√≥n "Authorize" en Swagger para autenticarte con JWT',
      ),
  );

  console.log('\n');
  console.log(
    chalk.bold.magenta('üìä Estado: ') +
      chalk.bold.green('‚úì Listo para recibir peticiones'),
  );
  console.log(chalk.cyan('==========================================\n'));
}

void bootstrap();
